#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    vector<int> v(n);
	    for(int i=0;i<n;i++){
	        cin>>v[i];
	    }
	    int x;
	    cin>>x;
	    sort(v.begin(),v.end());
	    
	    int i=n-1;
	    int ans=0;
	    while(i>0){
	        if(v[i]-v[i-1]<x){
	            ans+=(v[i]+v[i-1]);
	            i=i-2;
	        }
	        else{
	            i--;
	        }
	    }
	    cout<<ans<<endl;
	}
	return 0;
}


Using DP

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    vector<int> v(n);
	    for(int i=0;i<n;i++){
	        cin>>v[i];
	    }
	    int x;
	    cin>>x;
	    sort(v.begin(),v.end());
	    
	    vector<int> dp(n);
	    dp[0]=0;
	    for(int i=1;i<n;i++){
	        // Not pairing with i-1 th element
	        dp[i]=dp[i-1];
	        
	        // pairing with i-1 th element
	        if(v[i]-v[i-1]<x){
	            if(i>=2){
	                dp[i]=max(dp[i],v[i]+v[i-1]+dp[i-2]);
	            }
	            else{
	                dp[i]=max(dp[i],v[i]+v[i-1]);
	            }
	        }
	        
	    }
	    cout<<dp[n-1]<<endl;
	}
	return 0;
}

// Recursive Solution

bool isInterleaved(string A,string B,string C){
    int c=C.size();
    int a=A.size();
    int b=B.size();
    if(a==0 && b==0 && c==0){
        return true;
    }
    if(c==0){
        return false;
    }
    bool x=(a!=0 && A[0]==C[0]) && isInterleaved(A.substr(1),B,C.substr(1));
    bool y=(b!=0 && B[0]==C[0]) && isInterleaved(A,B.substr(1),C.substr(1));
    
    return x||y;
}
if A and B have same characters then there would be overlapping cases
// DP solution

bool isInterleaved(string A,string B,string C){
    int c=C.size();
    int a=A.size();
    int b=B.size();
    vector<vector<bool>> dp(a+1,vector<bool>(b+1,false));
    if(c!=a+b) return false;
    
    for(int i=0;i<=a;i++){
        for(int j=0;j<=b;j++){
            if(i==0 && j==0){
                dp[i][j]=true;
            }
            else if(i==0){
                if(B[j-1]==C[j-1]){
                    dp[i][j]=dp[i][j-1];
                }
            }
            else if(j==0){
                if(A[i-1]==C[i-1]){
                    dp[i][j]=dp[i-1][j];
                }
            }
            else if(A[i-1]==C[i+j-1] && B[j-1]!=C[i+j-1]){
                dp[i][j]=dp[i-1][j];
            }
            else if(A[i-1]!=C[i+j-1] && B[j-1]==C[i+j-1]){
                dp[i][j]=dp[i][j-1];
            }
            else if(A[i-1]==C[i+j-1] && B[j-1]==C[i+j-1]){
                dp[i][j]=dp[i-1][j] || dp[i][j-1];
            }
        }
    }
    return dp[a][b];
}

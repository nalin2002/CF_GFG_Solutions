// DP problem and an extension of Length of longest increasing subsequence problem

class Solution {
public:
    
    int findLongestChain(vector<vector<int>>& pairs) {
        
        
       vector<pair<int,int>> v;
        for(auto x :pairs){
            auto y= make_pair(x[0],x[1]);
            v.push_back(y);
        }
        int n=v.size();
        sort(v.begin(),v.end());
        vector<int> dp(n,1);
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(v[i].first>v[j].second && dp[i]<dp[j]+1){
                    dp[i]=dp[j]+1;
                }
            }
        }
        return *max_element(dp.begin(),dp.end());
    }
};

// recursive way

#include <iostream>
#include <string>
#include <vector>
using namespace std;

int func(string s1,int n,string s2,int m){
    /* 
    Recursive way
    
    if(n==0 || m==0){
        return 0;
    }
    if(s1[n-1]==s2[m-1] && n!=m){
        return 1+func(s1,n-1,s2,m-1);
    }
    else{
        return max(func(s1,n-1,s2,m),func(s1,n,s2,m-1));
    }
    
    */
    
    // DP way
    vector<vector<int>> dp(n+1,vector<int>(m+1,0));
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(s1[i-1]==s2[j-1] && i!=j){
                dp[i][j]=1+dp[i-1][j-1];
            }
            else{
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    return dp[n][m];
}
int main() {
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    string s;
	    cin>>s;
	    cout<<func(s,n,s,n)<<endl;
	}
	return 0;
}
